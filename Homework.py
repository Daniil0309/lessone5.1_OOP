# Разработай систему управления учетными записями пользователей для небольшой компании. Компания разделяет сотрудников
# на обычных работников и администраторов. У каждого сотрудника есть уникальный идентификатор (ID),
# имя и уровень доступа. Администраторы, помимо обычных данных пользователей, имеют дополнительный уровень доступа и
# могут добавлять или удалять пользователя из системы.
# Требования:
# 1.Класс `User*: Этот класс должен инкапсулировать данные о пользователе: ID, имя и уровень доступа
# ('user' для обычных сотрудников).
# 2.Класс Admin: Этот класс должен наследоваться от класса User. Добавь дополнительный атрибут уровня доступа,
# специфичный для администраторов ('admin'). Класс должен также содержать методы add_user и remove_user,
# которые позволяют добавлять и удалять пользователей из списка (представь, что это просто список экземпляров User).
# 3.Инкапсуляция данных: Убедись, что атрибуты классов защищены от прямого доступа и модификации снаружи.
# Предоставь доступ к необходимым атрибутам через методы (например, get и set методы).

class User:
    # Класс User, описывающий обычного пользователя
    def __init__(self, id, name, access_level='user'):
        # Метод инициализации, создающий пользователя с ID, именем и уровнем доступа (по умолчанию 'user')
        self.id = id  # Уникальный ID пользователя
        self.name = name  # Имя пользователя
        self.access_level = access_level  # Уровень доступа пользователя

    def get_id(self):
        # Метод для получения ID пользователя
        return self.id

    def get_name(self):
        # Метод для получения имени пользователя
        return self.name

    def get_access_level(self):
        # Метод для получения уровня доступа пользователя
        return self.access_level


class Admin(User):
    # Класс Admin, наследующий от класса User, представляет администратора
    def __init__(self, id, name):
        # Метод инициализации, создающий администратора с ID, именем и уровнем доступа 'admin'
        super().__init__(id, name, access_level='admin')  # Вызов метода инициализации родительского класса
        self.__user_list = []  # Приватный список пользователей

    def add_user(self, user):
        # Метод для добавления пользователя в список
        self.__user_list.append(user)

    def remove_user(self, id):
        # Метод для удаления пользователя из списка по ID
        for user in self.__user_list:
            if user.get_id() == id:  # Если ID пользователя совпадает с заданным ID
                self.__user_list.remove(user)  # Удаляем пользователя из списка
                return f"Пользователь с ID {id} удален"
        return "Пользователь не найден"


# Создание администратора
admin1 = Admin(1, "Даниил")

# Создание пользователей
user1 = User(101, "Петя")
user2 = User(102, "Коля")

# Добавление пользователей администратором
admin1.add_user(user1)
admin1.add_user(user2)

# Вывод списка пользователей
print("Список пользователей:")
for user in admin1._Admin__user_list:  # Обращение к приватному списку пользователей
    print("ID:", user.get_id(), "Имя:", user.get_name(), "Уровень доступа:", user.get_access_level())

# Удаление пользователя
print(admin1.remove_user(101))

# Вывод обновленного списка пользователей
print("Обновленный список пользователей:")
for user in admin1._Admin__user_list:  # Обращение к приватному списку пользователей
    print("ID:", user.get_id(), "Имя:", user.get_name(), "Уровень доступа:", user.get_access_level())